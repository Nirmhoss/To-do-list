openapi: 3.0.0
info:
  title: Todo API
  description: Todo List API with JWT authentication
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
        username:
          type: string
          description: Username for the account
        email:
          type: string
          format: email
          description: Email address of the user
      required:
        - id
        - username
        - email
    
    UserRegistration:
      type: object
      properties:
        username:
          type: string
          description: Username for the new account
        email:
          type: string
          format: email
          description: Email address for the new account
        password:
          type: string
          format: password
          description: Password for the new account
      required:
        - username
        - email
        - password
    
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address for authentication
        password:
          type: string
          format: password
          description: Password for authentication
      required:
        - email
        - password
    
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication
        user:
          $ref: '#/components/schemas/User'
      required:
        - token
        - user
    
    Todo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the todo item
        title:
          type: string
          description: Title of the todo item
        description:
          type: string
          description: Detailed description of the todo item
        completed:
          type: boolean
          description: Indicates whether the todo is completed
        createdAt:
          type: string
          format: date-time
          description: Date and time when the todo was created
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the todo was last updated
      required:
        - id
        - title
        - completed
    
    TodoCreate:
      type: object
      properties:
        title:
          type: string
          description: Title of the todo item
        description:
          type: string
          description: Detailed description of the todo item
        completed:
          type: boolean
          description: Indicates whether the todo is completed
      required:
        - title
    
    TodoUpdate:
      type: object
      properties:
        title:
          type: string
          description: Title of the todo item
        description:
          type: string
          description: Detailed description of the todo item
        completed:
          type: boolean
          description: Indicates whether the todo is completed
    
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
        status:
          type: integer
          description: HTTP status code
      required:
        - message
        - status

paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Register a new user in the system
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate a user
      description: Login and get a JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/auth/me:
    get:
      tags:
        - Auth
      summary: Get user profile
      description: Get the current user's profile information
      operationId: getUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/todos:
    get:
      tags:
        - Todos
      summary: Get all todos
      description: Get all todos for the current user
      operationId: getAllTodos
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of todos retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - Todos
      summary: Create a todo
      description: Create a new todo item
      operationId: createTodo
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreate'
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/todos/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the todo to operate on
        required: true
        schema:
          type: integer
          format: int64
    
    get:
      tags:
        - Todos
      summary: Get todo by ID
      description: Get a specific todo by ID
      operationId: getTodoById
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Todo retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Todos
      summary: Update todo
      description: Update a specific todo
      operationId: updateTodo
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoUpdate'
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - Todos
      summary: Delete todo
      description: Delete a specific todo
      operationId: deleteTodo
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Todo deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'